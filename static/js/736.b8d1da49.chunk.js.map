{"version":3,"file":"static/js/736.b8d1da49.chunk.js","mappings":"oTAEaA,EAAWC,EAAAA,GAAAA,GAAH,2GAKRC,EAAWD,EAAAA,GAAAA,GAAH,uMAURE,EAAUF,EAAAA,GAAAA,IAAH,6G,SCkCpB,EA3Ca,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAcA,OAbAC,EAAAA,EAAAA,YAAU,WACR,GAAKL,EAAL,CACA,IAAMM,EAAO,mCAAG,WAAMN,GAAN,iGAEOO,EAAAA,EAAAA,GAAUP,GAFjB,OAENQ,EAFM,OAGZJ,EAAQI,EAAKL,MAHD,gDAKZM,EAAAA,GAAAA,MAAY,qCALA,yDAAH,sDAQbH,EAAQN,EATY,CAUrB,GAAE,CAACA,KAGF,4BACE,wBAAI,SACHG,EAAKO,OAAS,GACb,SAACd,EAAD,UACGO,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAACjB,EAAD,WACGiB,GACC,SAAChB,EAAD,CACEiB,IAAG,yCAAoCD,GACvCE,IAAKJ,KAGL,SAACd,EAAD,CAASiB,IAAKE,EAAYD,IAAKJ,KAEnC,uBAAIA,KACJ,yBAAG,cAAYC,OAVFF,EADP,OAgBZ,uBAAG,gCAIV,C,kMC/CDO,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzBA,EAAAA,EAAAA,SAAAA,OAAwB,CAAEC,QADV,oCAGT,IAAMC,EAAmB,mCAAG,6GAEJF,EAAAA,EAAAA,IAAA,sBAFI,cAErBG,EAFqB,yBAGpBA,EAASd,MAHW,gCAIbe,QAAQC,IAAR,MAJa,yDAAH,qDAOnBC,EAAiB,mCAAG,WAAOC,GAAP,gGAEFP,EAAAA,EAAAA,IAAA,8BAAiCO,IAF/B,cAEnBJ,EAFmB,yBAGlBA,EAASd,MAHS,gCAIXe,QAAQC,IAAR,MAJW,yDAAH,sDAOjBG,EAAiB,mCAAG,WAAO3B,GAAP,gGAEFmB,EAAAA,EAAAA,IAAA,iBAAoBnB,IAFlB,cAEnBsB,EAFmB,yBAGlBA,EAASd,MAHS,gCAIXe,QAAQC,IAAR,MAJW,yDAAH,sDAMjBjB,EAAS,mCAAG,WAAMP,GAAN,gGAEEmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,aAFF,cAEf4B,EAFe,yBAGdA,EAASpB,MAHK,gCAKrBe,QAAQC,IAAI,KAAMK,SALG,yDAAH,sDASTC,EAAW,mCAAG,WAAM9B,GAAN,gGAEAmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,aAFA,cAEjB4B,EAFiB,yBAGhBA,EAASpB,MAHO,gCAKvBe,QAAQC,IAAI,KAAMK,SALK,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","service/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n`;\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  gap: 4px;\n  width: 120px;\n  border-radius: 4px;\n  background-color: #e7dfdf;\n`;\nexport const CastImg = styled.img`\n  display: block;\n  width: 100%;\n  object-fit: cover;\n  object-position: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { fetchCast } from 'service/Api';\nimport defaultImg from '../../components/not-found.jpg'\nimport { CastImg, CastItem, CastList } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    if (!movieId) return;\n    const getCast = async movieId => {\n      try {\n        const data = await fetchCast(movieId);\n        setCast(data.cast);\n      } catch (error) {\n        toast.error('Smthg went wrong, we re so sorry.')\n      }\n    };\n    getCast(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      {cast.length > 0 ? (\n        <CastList>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <CastItem key={id}>\n              {profile_path ? (\n                <CastImg\n                  src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                  alt={name}\n                />\n              ) : (\n                  <CastImg src={defaultImg} alt={name} />\n              )}\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <p>We didn't have any result</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'adda9a4c76497ae7ac6c1263f748732e';\naxios.defaults.params = { api_key: API_KEY };\n\nexport const fetchTrendingMovies = async () => {\n    try {\n        const responce = await axios.get(`trending/movie/day`);\n        return responce.data;\n    } catch (error) { console.log(error); }\n};\n\nexport const fetchSearchMovies = async (query) => {\n    try {\n        const responce = await axios.get(`/search/movie?query=${query}`);\n        return responce.data;\n    } catch (error) { console.log(error); }\n};\n\nexport const fetchMovieDetails = async (movieId) => {\n    try {\n        const responce = await axios.get(`/movie/${movieId}`);\n        return responce.data;\n    } catch (error) { console.log(error); }\n};\nexport const fetchCast = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/credits`);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchReview = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/reviews`);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n"],"names":["CastList","styled","CastItem","CastImg","movieId","useParams","useState","cast","setCast","useEffect","getCast","fetchCast","data","toast","length","map","id","name","character","profile_path","src","alt","defaultImg","axios","api_key","fetchTrendingMovies","responce","console","log","fetchSearchMovies","query","fetchMovieDetails","response","message","fetchReview"],"sourceRoot":""}