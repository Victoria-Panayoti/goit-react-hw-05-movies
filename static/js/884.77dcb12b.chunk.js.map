{"version":3,"file":"static/js/884.77dcb12b.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/MovieDetails.jsx","service/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const LoaderBox = styled.div`\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n`;","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderBox } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderBox>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </LoaderBox>\n  );\n};","import { Suspense, useRef, useState, useEffect } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { fetchMovieDetails } from 'service/Api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    setIsLoading(true);\n    const getMovieDetails = async movieId => {\n      try {\n        const data = await fetchMovieDetails(movieId);\n        setMovie(data);\n      } catch (error) {\n        toast.error('Smthg went wrong, we re so sorry.');\n      } finally{setIsLoading(false)}\n    };\n    getMovieDetails(movieId);\n  }, [movieId]);\n  const { title, vote_average, overview, genres, poster_path } = movie;\n  return (\n    <>\n      <Link to={backLinkLocationRef.current}>Go back</Link>\n      {isLoading && <Loader />}\n      {poster_path\n        ? <img src={`https://image.tmdb.org/t/p/w300${poster_path}`} alt={title} />\n        :<img src='/src/components/not-found.jpg' alt={title} />\n      }\n      <h2>{title}</h2>\n      <p>User score {Math.round(vote_average)}%</p>\n      <h3>Overview</h3>\n      <p>{overview}</p>\n      <h3>Genres</h3>\n      {genres && genres.length > 0 && (\n        <p>{genres.map(genre => genre.name).join(' ')}</p>\n      )}\n      <h3>Additional information</h3>\n      {movie &&(<ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>)}\n      \n      <Suspense fallback={<Loader/>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'adda9a4c76497ae7ac6c1263f748732e';\naxios.defaults.params = { api_key: API_KEY };\n\nexport const fetchTrendingMovies = async () => {\n    try {\n        const responce = await axios.get(`trending/movie/day`);\n        return responce.data;\n    } catch (error) { console.log(error); }\n};\n\nexport const fetchSearchMovies = async (query) => {\n    try {\n        const responce = await axios.get(`/search/movie?query=${query}`);\n        return responce.data;\n    } catch (error) { console.log(error); }\n};\n\nexport const fetchMovieDetails = async (movieId) => {\n    try {\n        const responce = await axios.get(`/movie/${movieId}`);\n        return responce.data;\n    } catch (error) { console.log(error); }\n};\nexport const fetchCast = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/credits`);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchReview = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/reviews`);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n"],"names":["LoaderBox","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","movieId","useParams","useState","movie","setMovie","isLoading","setIsLoading","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","getMovieDetails","fetchMovieDetails","data","toast","title","vote_average","overview","genres","poster_path","Link","to","current","src","alt","Math","round","length","map","genre","name","join","Suspense","fallback","axios","api_key","fetchTrendingMovies","responce","console","log","fetchSearchMovies","query","fetchCast","response","message","fetchReview"],"sourceRoot":""}